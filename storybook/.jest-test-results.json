{"numFailedTestSuites":3,"numFailedTests":5,"numPassedTestSuites":15,"numPassedTests":176,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":18,"numTotalTests":181,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":4,"total":4,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1572993218166,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator should render with .loading class when isLoading prop is true","location":null,"status":"passed","title":"should render with .loading class when isLoading prop is true"},{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator should not render with .loading class when isLoading prop is false","location":null,"status":"passed","title":"should not render with .loading class when isLoading prop is false"}],"endTime":1572993222020,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom/src/components/__tests__/LoadingIndicator.test.js","startTime":1572993219670,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API","location":null,"status":"passed","title":"expect to call Google Maps API"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom API Key","location":null,"status":"passed","title":"expect to call Google Maps API with a custom API Key"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom endpoint","location":null,"status":"passed","title":"expect to call Google Maps API with a custom endpoint"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to render nothing when it's loading","location":null,"status":"passed","title":"expect to render nothing when it's loading"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call children with the Google object when it's loaded","location":null,"status":"passed","title":"expect to call children with the Google object when it's loaded"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to not call setState when we unmount before loading is complete","location":null,"status":"passed","title":"expect to not call setState when we unmount before loading is complete"}],"endTime":1572993222188,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.jsdom.js","startTime":1572993219752,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createConnector","state"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n  \u001b[2m{\"contextValue\": {\"createHrefForState\": [Function createHrefForState], \"onInternalStateUpdate\": [Function onInternalStateUpdate], \"onSearchForFacetValues\": [Function onSearchForFacetValues], \"onSearchParameters\": [Function onSearchParameters], \"onSearchStateChange\": [Function onSearchStateChange], \"store\": {\"getState\": [Function getState], \"setState\": [Function setState], \"subscribe\": [Function subscribe]}, \"widgetsManager\": {\"getWidgets\": [Function getWidgets], \"registerWidget\": [Function registerWidget], \"update\": [Function update]}}, \"hello\": \"there\"}\u001b[22m,\n  \u001b[2m{}\u001b[22m,\n  \u001b[2m{\"error\": {}, \"isSearchStalled\": false, \"results\": {}, \"searching\": false}\u001b[22m,\n  \u001b[2m{}\u001b[22m,\n\u001b[32m- {}\u001b[39m,\n\nNumber of calls: \u001b[31m1\u001b[39m\n    at Object.toHaveBeenCalledWith (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createConnector.js:76:32)\n    at Object.asyncJestTest (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"],"fullName":"createConnector state computes provided props","location":null,"status":"failed","title":"computes provided props"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on props change","location":null,"status":"passed","title":"computes provided props on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with the correct value for `canRender` on props change","location":null,"status":"passed","title":"computes provided props with the correct value for `canRender` on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on search state change","location":null,"status":"passed","title":"computes provided props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with latest props on search state change","location":null,"status":"passed","title":"computes provided props with latest props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not compute provided props when props do not change","location":null,"status":"passed","title":"does not compute provided props when props do not change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state use shouldComponentUpdate when provided","location":null,"status":"passed","title":"use shouldComponentUpdate when provided"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state subscribes to the store once mounted","location":null,"status":"passed","title":"subscribes to the store once mounted"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state unsubscribes from the store on unmount","location":null,"status":"passed","title":"unsubscribes from the store on unmount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on dispatch after unmount","location":null,"status":"passed","title":"does not throw an error on dispatch after unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getMetadata","location":null,"status":"passed","title":"registers itself as a widget with getMetadata"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getSearchParameters","location":null,"status":"passed","title":"registers itself as a widget with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget once mounted","location":null,"status":"passed","title":"registers itself as a widget once mounted"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not register itself as a widget without getMetadata nor getSearchParameters","location":null,"status":"passed","title":"does not register itself as a widget without getMetadata nor getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchParameters on mount with getSearchParameters","location":null,"status":"passed","title":"calls onSearchParameters on mount with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not call onSearchParameters on mount without getSearchParameters","location":null,"status":"passed","title":"does not call onSearchParameters on mount without getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget binds getSearchParameters to the connector instance with onSearchParameters","location":null,"status":"passed","title":"binds getSearchParameters to the connector instance with onSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers a widgetManager update on props change","location":null,"status":"passed","title":"triggers a widgetManager update on props change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger a widgetManager update when props do not change","location":null,"status":"passed","title":"does not trigger a widgetManager update when props do not change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers an onSearchStateChange on props change with transitionState","location":null,"status":"passed","title":"triggers an onSearchStateChange on props change with transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger an onSearchStateChange on props change without transitionState","location":null,"status":"passed","title":"does not trigger an onSearchStateChange on props change without transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget unregisters itself on unmount","location":null,"status":"passed","title":"unregisters itself on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp without empty keys on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp without empty keys on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns the widget search parameters when getSearchParameters is provided","location":null,"status":"passed","title":"returns the widget search parameters when getSearchParameters is provided"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns null when getSearchParameters is not provided","location":null,"status":"passed","title":"returns null when getSearchParameters is not provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns the widget metadata when getMetadata is provided","location":null,"status":"passed","title":"returns the widget metadata when getMetadata is provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns an empty object when getMetadata is not provided","location":null,"status":"passed","title":"returns an empty object when getMetadata is not provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the widget transitionState when transitionState is provided","location":null,"status":"passed","title":"returns the widget transitionState when transitionState is provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the given next state when transitionState is not provided","location":null,"status":"passed","title":"returns the given next state when transitionState is not provided"},{"ancestorTitles":["createConnector","refine"],"failureMessages":[],"fullName":"createConnector refine passes a refine method to the component","location":null,"status":"passed","title":"passes a refine method to the component"},{"ancestorTitles":["createConnector","createURL"],"failureMessages":[],"fullName":"createConnector createURL passes a createURL method to the component","location":null,"status":"passed","title":"passes a createURL method to the component"},{"ancestorTitles":["createConnector","wrapped with VisionProvider"],"failureMessages":[],"fullName":"createConnector wrapped with VisionProvider default export reads from context","location":null,"status":"passed","title":"default export reads from context"}],"endTime":1572993222469,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mcreateConnector › state › computes provided props\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mjest.fn()\u001b[39m\u001b[2m).\u001b[22mtoHaveBeenCalledWith\u001b[2m(\u001b[22m\u001b[32m...expected\u001b[39m\u001b[2m)\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n      \u001b[2m{\"contextValue\": {\"createHrefForState\": [Function createHrefForState], \"onInternalStateUpdate\": [Function onInternalStateUpdate], \"onSearchForFacetValues\": [Function onSearchForFacetValues], \"onSearchParameters\": [Function onSearchParameters], \"onSearchStateChange\": [Function onSearchStateChange], \"store\": {\"getState\": [Function getState], \"setState\": [Function setState], \"subscribe\": [Function subscribe]}, \"widgetsManager\": {\"getWidgets\": [Function getWidgets], \"registerWidget\": [Function registerWidget], \"update\": [Function update]}}, \"hello\": \"there\"}\u001b[22m,\n      \u001b[2m{}\u001b[22m,\n      \u001b[2m{\"error\": {}, \"isSearchStalled\": false, \"results\": {}, \"searching\": false}\u001b[22m,\n      \u001b[2m{}\u001b[22m,\n    \u001b[32m- {}\u001b[39m,\n\n    Number of calls: \u001b[31m1\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 74 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 75 | \u001b[39m      expect(getProvidedProps)\u001b[33m.\u001b[39mtoHaveBeenCalledTimes(\u001b[35m1\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 76 | \u001b[39m      expect(getProvidedProps)\u001b[33m.\u001b[39mtoHaveBeenCalledWith(\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                               \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 77 | \u001b[39m        { hello\u001b[33m:\u001b[39m \u001b[32m'there'\u001b[39m\u001b[33m,\u001b[39m contextValue\u001b[33m:\u001b[39m context }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 78 | \u001b[39m        state\u001b[33m.\u001b[39mwidgets\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 79 | \u001b[39m        {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toHaveBeenCalledWith (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/core/__tests__/createConnector.js\u001b[39m\u001b[0m\u001b[2m:76:32)\u001b[2m\u001b[22m\n","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createConnector.js","startTime":1572993219661,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners from events","location":null,"status":"passed","title":"expect to add listeners from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners with event & marker","location":null,"status":"passed","title":"expect to add listeners with event & marker"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from events","location":null,"status":"passed","title":"expect to only add listeners listed from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from props","location":null,"status":"passed","title":"expect to only add listeners listed from props"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to return a function that remove the listeners","location":null,"status":"passed","title":"expect to return a function that remove the listeners"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an object with listeners propType from event types","location":null,"status":"passed","title":"expect to return an object with listeners propType from event types"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an empty object from empty event types","location":null,"status":"passed","title":"expect to return an empty object from empty event types"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an object without excluded keys","location":null,"status":"passed","title":"expect to return an object without excluded keys"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return the given props when excluded keys is empty","location":null,"status":"passed","title":"expect to return the given props when excluded keys is empty"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an empty object when all keys are excluded","location":null,"status":"passed","title":"expect to return an empty object when all keys are excluded"}],"endTime":1572993222587,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom-maps/src/__tests__/utils.js","startTime":1572993222040,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1572993222679,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/connectors/__tests__/connectSearchBox.js","startTime":1572993222202,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createVisionManager"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"error\": null,\u001b[22m\n\u001b[2m    \"isSearchStalled\": true,\u001b[22m\n\u001b[2m    \"metadata\": Array [],\u001b[22m\n\u001b[2m    \"results\": null,\u001b[22m\n\u001b[32m-   \"search\": false,\u001b[39m\n\u001b[32m-   \"searchForFacetValues\": false,\u001b[39m\n\u001b[31m+   \"searching\": false,\u001b[39m\n\u001b[2m    \"widgets\": Object {},\u001b[22m\n\u001b[2m  }\u001b[22m\n    at Object.toEqual (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.js:43:33)\n    at Object.asyncJestTest (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"],"fullName":"createVisionManager initializes the manager with an empty state","location":null,"status":"failed","title":"initializes the manager with an empty state"},{"ancestorTitles":["createVisionManager","client hydratation"],"failureMessages":["TypeError: _cliniasearchHelper.default.SearchResults is not a constructor\n    at hydrateResultsState (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:284:12)\n    at createVisionManager (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:85:14)\n    at Object.<anonymous> (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.js:81:7)\n    at Object.asyncJestTest (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"],"fullName":"createVisionManager client hydratation hydrates the `searchClient` for a single index results","location":null,"status":"failed","title":"hydrates the `searchClient` for a single index results"},{"ancestorTitles":["createVisionManager","client hydratation"],"failureMessages":["TypeError: acc.concat is not a function\n    at /Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:249:53\n    at Array.reduce (<anonymous>)\n    at hydrateSearchClientWithMultiIndexRequest (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:249:25)\n    at hydrateSearchClient (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:240:7)\n    at createVisionManager (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/createVisionManager.js:81:3)\n    at Object.<anonymous> (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.js:137:7)\n    at Object.asyncJestTest (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"],"fullName":"createVisionManager client hydratation hydrates the `searchClient` for a multi index results","location":null,"status":"failed","title":"hydrates the `searchClient` for a multi index results"}],"endTime":1572993222973,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mcreateVisionManager › initializes the manager with an empty state\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"error\": null,\u001b[22m\n    \u001b[2m    \"isSearchStalled\": true,\u001b[22m\n    \u001b[2m    \"metadata\": Array [],\u001b[22m\n    \u001b[2m    \"results\": null,\u001b[22m\n    \u001b[32m-   \"search\": false,\u001b[39m\n    \u001b[32m-   \"searchForFacetValues\": false,\u001b[39m\n    \u001b[31m+   \"searching\": false,\u001b[39m\n    \u001b[2m    \"widgets\": Object {},\u001b[22m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 41 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 42 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 43 | \u001b[39m    expect(vm\u001b[33m.\u001b[39mstore\u001b[33m.\u001b[39mgetState())\u001b[33m.\u001b[39mtoEqual({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 44 | \u001b[39m      error\u001b[33m:\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 45 | \u001b[39m      isSearchStalled\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 46 | \u001b[39m      metadata\u001b[33m:\u001b[39m []\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/core/__tests__/createVisionManager.js\u001b[39m\u001b[0m\u001b[2m:43:33)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mcreateVisionManager › client hydratation › hydrates the `searchClient` for a single index results\u001b[39m\u001b[22m\n\n    TypeError: _cliniasearchHelper.default.SearchResults is not a constructor\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 282 | \u001b[39m\u001b[32m      ),\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 283 | \u001b[39m\u001b[32m    })}`\u001b[39m\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 284 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m\u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 285 | \u001b[39m    client\u001b[33m.\u001b[39mcache \u001b[33m=\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 286 | \u001b[39m      \u001b[33m...\u001b[39mclient\u001b[33m.\u001b[39mcache\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 287 | \u001b[39m      [key]\u001b[33m:\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify({\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat hydrateResultsState (\u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:284:12)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createVisionManager (\u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:85:14)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/core/__tests__/createVisionManager.js\u001b[39m\u001b[0m\u001b[2m:81:7)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mcreateVisionManager › client hydratation › hydrates the `searchClient` for a multi index results\u001b[39m\u001b[22m\n\n    TypeError: acc.concat is not a function\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 247 | \u001b[39m    stalledSearchTimer \u001b[33m=\u001b[39m setTimeout(() \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 248 | \u001b[39m      \u001b[36mconst\u001b[39m { resultsFacetsValues\u001b[33m,\u001b[39m \u001b[33m...\u001b[39mpartialState } \u001b[33m=\u001b[39m store\u001b[33m.\u001b[39mgetState()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 249 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m\u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 250 | \u001b[39m      store\u001b[33m.\u001b[39msetState({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 251 | \u001b[39m        \u001b[33m...\u001b[39mpartialState\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 252 | \u001b[39m        isSearchStalled\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat \u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:249:53\u001b[2m\u001b[22m\n\u001b[2m          at Array.reduce (<anonymous>)\u001b[22m\n\u001b[2m      \u001b[2mat hydrateSearchClientWithMultiIndexRequest (\u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:249:25)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat hydrateSearchClient (\u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:240:7)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat createVisionManager (\u001b[2mpackages/react-vision-core/src/core/createVisionManager.js\u001b[2m:81:3)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.<anonymous> (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/core/__tests__/createVisionManager.js\u001b[39m\u001b[0m\u001b[2m:137:7)\u001b[2m\u001b[22m\n","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.js","startTime":1572993219968,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision validates its props","location":null,"status":"passed","title":"validates its props"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision correctly instantiates the visionManager","location":null,"status":"passed","title":"correctly instantiates the visionManager"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision updates Clinia client when new one is given in props","location":null,"status":"passed","title":"updates Clinia client when new one is given in props"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\nExpected: \u001b[32m{\"a\": 1, \"transitioned\": true}\u001b[39m\nReceived: \u001b[31mundefined\u001b[39m\n    at Object.toEqual (/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/widgets/__tests__/Vision.js:201:25)\n    at Object.asyncJestTest (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/pedroferreira/Sources/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:93:5)"],"fullName":"Vision createHrefForState passes through to createURL when it is defined","location":null,"status":"failed","title":"passes through to createURL when it is defined"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":[],"fullName":"Vision createHrefForState returns # otherwise","location":null,"status":"passed","title":"returns # otherwise"}],"endTime":1572993223048,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mVision › createHrefForState › passes through to createURL when it is defined\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    Expected: \u001b[32m{\"a\": 1, \"transitioned\": true}\u001b[39m\n    Received: \u001b[31mundefined\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 199 | \u001b[39m      \u001b[36mconst\u001b[39m { createHrefForState } \u001b[33m=\u001b[39m childContext\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 200 | \u001b[39m      \u001b[36mconst\u001b[39m outputURL \u001b[33m=\u001b[39m createHrefForState({ a\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 201 | \u001b[39m      expect(outputURL)\u001b[33m.\u001b[39mtoEqual({ a\u001b[33m:\u001b[39m \u001b[35m1\u001b[39m\u001b[33m,\u001b[39m transitioned\u001b[33m:\u001b[39m \u001b[36mtrue\u001b[39m })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m     | \u001b[39m                        \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 202 | \u001b[39m      expect(createURL\u001b[33m.\u001b[39mmock\u001b[33m.\u001b[39mcalls[\u001b[35m0\u001b[39m][\u001b[35m1\u001b[39m])\u001b[33m.\u001b[39mtoBe(widgetsIds)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 203 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 204 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/widgets/__tests__/Vision.js\u001b[39m\u001b[0m\u001b[2m:201:25)\u001b[2m\u001b[22m\n","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/widgets/__tests__/Vision.js","startTime":1572993219970,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable provides a translate prop to the composed component","location":null,"status":"passed","title":"provides a translate prop to the composed component"},{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable uses the translations passed as props before the default","location":null,"status":"passed","title":"uses the translations passed as props before the default"}],"endTime":1572993223096,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/translatable.js","startTime":1572993222485,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames","location":null,"status":"passed","title":"expect to return classNames"},{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames with custom prefix","location":null,"status":"passed","title":"expect to return classNames with custom prefix"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if a modifier key is pressed","location":null,"status":"passed","title":"returns true if a modifier key is pressed"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if it's a middle click","location":null,"status":"passed","title":"returns true if it's a middle click"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns false otherwise","location":null,"status":"passed","title":"returns false otherwise"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize capitalizes a string","location":null,"status":"passed","title":"capitalizes a string"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize works with empty strings","location":null,"status":"passed","title":"works with empty strings"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end","location":null,"status":"passed","title":"with end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with start and end","location":null,"status":"passed","title":"with start and end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end and step","location":null,"status":"passed","title":"with end and step"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range rounds decimal array lengths","location":null,"status":"passed","title":"rounds decimal array lengths"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1572993223164,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom/src/core/__tests__/utils.js","startTime":1572993222651,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits should render with default hit component","location":null,"status":"passed","title":"should render with default hit component"},{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits should render with default no results found","location":null,"status":"passed","title":"should render with default no results found"},{"ancestorTitles":["Hits","Style tests"],"failureMessages":[],"fullName":"Hits Style tests should render main div with className props ","location":null,"status":"passed","title":"should render main div with className props "},{"ancestorTitles":["Hits","Style tests"],"failureMessages":[],"fullName":"Hits Style tests should render main div with style props ","location":null,"status":"passed","title":"should render main div with style props "},{"ancestorTitles":["Hits","Custom inner components"],"failureMessages":[],"fullName":"Hits Custom inner components should render with custom hit component","location":null,"status":"passed","title":"should render with custom hit component"},{"ancestorTitles":["Hits","Custom inner components"],"failureMessages":[],"fullName":"Hits Custom inner components should render with custom noResultsFound component","location":null,"status":"passed","title":"should render with custom noResultsFound component"},{"ancestorTitles":["Hits","DefaultHit"],"failureMessages":[],"fullName":"Hits DefaultHit should render with DefaultHit with resource id in the title","location":null,"status":"passed","title":"should render with DefaultHit with resource id in the title"},{"ancestorTitles":["Hits","DefaultHit"],"failureMessages":[],"fullName":"Hits DefaultHit should render DefaultHit with the resource as a JSON in the card body","location":null,"status":"passed","title":"should render DefaultHit with the resource as a JSON in the card body"}],"endTime":1572993223296,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.js","startTime":1572993219924,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker","location":null,"status":"passed","title":"expect to create a marker"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom anchor","location":null,"status":"passed","title":"expect to create a marker with a custom anchor"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom className","location":null,"status":"passed","title":"expect to create a marker with a custom className"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to append the element to the overlay","location":null,"status":"passed","title":"expect to append the element to the overlay"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to not append the element to the overlay when panes are not available","location":null,"status":"passed","title":"expect to not append the element to the overlay when panes are not available"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct position on the element","location":null,"status":"passed","title":"expect to set the correct position on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct zIndex on the element","location":null,"status":"passed","title":"expect to set the correct zIndex on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to not set the correct position when the projection is not available","location":null,"status":"passed","title":"expect to not set the correct position when the projection is not available"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove the element","location":null,"status":"passed","title":"expect to remove the element"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove all the listeners","location":null,"status":"passed","title":"expect to remove all the listeners"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to register listener","location":null,"status":"passed","title":"expect to register listener"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to return a function to remove the listener","location":null,"status":"passed","title":"expect to return a function to remove the listener"},{"ancestorTitles":["createHTMLMarker","getPosition"],"failureMessages":[],"fullName":"createHTMLMarker getPosition expect to return the latLng","location":null,"status":"passed","title":"expect to return the latLng"}],"endTime":1572993223333,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom-maps/src/elements/__tests__/createHTMLMarker.js","startTime":1572993222687,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should have focus after render when autoFocus prop is true","location":null,"status":"passed","title":"should have focus after render when autoFocus prop is true"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should initialize state with empty query","location":null,"status":"passed","title":"should initialize state with empty query"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should render input disabled when \"disabled\" props is true","location":null,"status":"passed","title":"should render input disabled when \"disabled\" props is true"},{"ancestorTitles":["SearchBox","Style tests"],"failureMessages":[],"fullName":"SearchBox Style tests should render main div with className props","location":null,"status":"passed","title":"should render main div with className props"},{"ancestorTitles":["SearchBox","Style tests"],"failureMessages":[],"fullName":"SearchBox Style tests should render main div with style props ","location":null,"status":"passed","title":"should render main div with style props "},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom loading indicator","location":null,"status":"passed","title":"should render with custom loading indicator"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should not render with custom loading indicator when \"showLoadingIndicator\" props is false","location":null,"status":"passed","title":"should not render with custom loading indicator when \"showLoadingIndicator\" props is false"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should not render with custom loading indicator when \"loading\" props is false","location":null,"status":"passed","title":"should not render with custom loading indicator when \"loading\" props is false"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom clear button","location":null,"status":"passed","title":"should render with custom clear button"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom submit button","location":null,"status":"passed","title":"should render with custom submit button"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should update state on default input change","location":null,"status":"passed","title":"should update state on default input change"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should not submit on default input change when \"searchAsYouType\" prop is not valid ","location":null,"status":"passed","title":"should not submit on default input change when \"searchAsYouType\" prop is not valid "},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should submit on default input change when \"searchAsYouType\" prop is true ","location":null,"status":"passed","title":"should submit on default input change when \"searchAsYouType\" prop is true "},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should call submit on form submit","location":null,"status":"passed","title":"should call submit on form submit"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should clear state on default clear search click","location":null,"status":"passed","title":"should clear state on default clear search click"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onBlur on input blur","location":null,"status":"passed","title":"should trigger onBlur on input blur"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onChange on input change","location":null,"status":"passed","title":"should trigger onChange on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onClear on input change","location":null,"status":"passed","title":"should trigger onClear on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onFocus on input focus","location":null,"status":"passed","title":"should trigger onFocus on input focus"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onInput on input change","location":null,"status":"passed","title":"should trigger onInput on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onKeyPress on input change","location":null,"status":"passed","title":"should trigger onKeyPress on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onSubmit on input change","location":null,"status":"passed","title":"should trigger onSubmit on input change"}],"endTime":1572993223530,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom/src/components/__tests__/SearchBox.test.js","startTime":1572993219684,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget adds the widget to the widgets list","location":null,"status":"passed","title":"adds the widget to the widgets list"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget returns an unregister method","location":null,"status":"passed","title":"returns an unregister method"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget schedules an update","location":null,"status":"passed","title":"schedules an update"},{"ancestorTitles":["createWidgetsManager","update"],"failureMessages":[],"fullName":"createWidgetsManager update schedules an update","location":null,"status":"passed","title":"schedules an update"}],"endTime":1572993223602,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createWidgetsManager.js","startTime":1572993223202,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() it does not break when there is a missing attribute","location":null,"status":"passed","title":"it does not break when there is a missing attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is no tag","location":null,"status":"passed","title":"creates a single element when there is no tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is only a tag","location":null,"status":"passed","title":"creates a single element when there is only a tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() fetches and parses a deep attribute","location":null,"status":"passed","title":"fetches and parses a deep attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - 1 big highlight","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - 1 big highlight"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() supports the array format, parses it and returns the part that is highlighted","location":null,"status":"passed","title":"supports the array format, parses it and returns the part that is highlighted"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - same pre and post tag","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - same pre and post tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `null`","location":null,"status":"passed","title":"throws when hit is `null`"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `undefined`","location":null,"status":"passed","title":"throws when hit is `undefined`"}],"endTime":1572993223642,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/highlight.js","startTime":1572993223104,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should reset indices page to 1 with resetPage","location":null,"status":"passed","title":"refine shared widgets should reset indices page to 1 with resetPage"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should not reset indices page to 1 without resetPage","location":null,"status":"passed","title":"refine shared widgets should not reset indices page to 1 without resetPage"}],"endTime":1572993223661,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/indexUtils.js","startTime":1572993222990,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from classes","location":null,"status":"passed","title":"gets the right displayName from classes"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from stateless components","location":null,"status":"passed","title":"gets the right displayName from stateless components"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName sets a default displayName when not able to find one","location":null,"status":"passed","title":"sets a default displayName when not able to find one"},{"ancestorTitles":["utils","defer"],"failureMessages":[],"fullName":"utils defer calling a function asynchronously, should be done as soon as possible.","location":null,"status":"passed","title":"calling a function asynchronously, should be done as soon as possible."},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key empty key should be removed","location":null,"status":"passed","title":"empty key should be removed"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not do anything on empty root","location":null,"status":"passed","title":"does not do anything on empty root"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does empty out objects","location":null,"status":"passed","title":"does empty out objects"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not empty out arrays","location":null,"status":"passed","title":"does not empty out arrays"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 1 and 2 on page 0","location":null,"status":"passed","title":"should add __positions 1 and 2 on page 0"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 5 and 6 on page 2","location":null,"status":"passed","title":"should add __positions 5 and 6 on page 2"},{"ancestorTitles":["utils","addQueryID"],"failureMessages":[],"fullName":"utils addQueryID should passed __queryID to hits","location":null,"status":"passed","title":"should passed __queryID to hits"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined on non-object root","location":null,"status":"passed","title":"returns undefined on non-object root"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns path if exists","location":null,"status":"passed","title":"returns path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath accepts a pre-split path as array","location":null,"status":"passed","title":"accepts a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath does not split a pre-split path as array","location":null,"status":"passed","title":"does not split a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if does not exist","location":null,"status":"passed","title":"returns undefined if does not exist"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns indexed path if exists","location":null,"status":"passed","title":"returns indexed path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if indexed path does not exist","location":null,"status":"passed","title":"returns undefined if indexed path does not exist"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1572993223679,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/utils.js","startTime":1572993223066,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createStore","getState"],"failureMessages":[],"fullName":"createStore getState retrieves the current state of the store","location":null,"status":"passed","title":"retrieves the current state of the store"},{"ancestorTitles":["createStore","setState"],"failureMessages":[],"fullName":"createStore setState sets a new state","location":null,"status":"passed","title":"sets a new state"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe subscribes to new states","location":null,"status":"passed","title":"subscribes to new states"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe returns a method to unsubscribe","location":null,"status":"passed","title":"returns a method to unsubscribe"}],"endTime":1572993223687,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-core/src/core/__tests__/createStore.js","startTime":1572993223343,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to require the file in a Node environment","location":null,"status":"passed","title":"expect to require the file in a Node environment"}],"endTime":1572993223737,"message":"","name":"/Users/pedroferreira/Sources/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.node.js","startTime":1572993223320,"status":"passed","summary":""}],"wasInterrupted":false}