{"numFailedTestSuites":0,"numFailedTests":0,"numPassedTestSuites":26,"numPassedTests":244,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":26,"numTotalTests":244,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":20,"total":20,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1573502605584,"success":true,"testResults":[{"assertionResults":[{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props","location":null,"status":"passed","title":"computes provided props"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on props change","location":null,"status":"passed","title":"computes provided props on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with the correct value for `canRender` on props change","location":null,"status":"passed","title":"computes provided props with the correct value for `canRender` on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on search state change","location":null,"status":"passed","title":"computes provided props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with latest props on search state change","location":null,"status":"passed","title":"computes provided props with latest props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not compute provided props when props do not change","location":null,"status":"passed","title":"does not compute provided props when props do not change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state use shouldComponentUpdate when provided","location":null,"status":"passed","title":"use shouldComponentUpdate when provided"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state subscribes to the store once mounted","location":null,"status":"passed","title":"subscribes to the store once mounted"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state unsubscribes from the store on unmount","location":null,"status":"passed","title":"unsubscribes from the store on unmount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on dispatch after unmount","location":null,"status":"passed","title":"does not throw an error on dispatch after unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getMetadata","location":null,"status":"passed","title":"registers itself as a widget with getMetadata"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getSearchParameters","location":null,"status":"passed","title":"registers itself as a widget with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget once mounted","location":null,"status":"passed","title":"registers itself as a widget once mounted"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not register itself as a widget without getMetadata nor getSearchParameters","location":null,"status":"passed","title":"does not register itself as a widget without getMetadata nor getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchParameters on mount with getSearchParameters","location":null,"status":"passed","title":"calls onSearchParameters on mount with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not call onSearchParameters on mount without getSearchParameters","location":null,"status":"passed","title":"does not call onSearchParameters on mount without getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget binds getSearchParameters to the connector instance with onSearchParameters","location":null,"status":"passed","title":"binds getSearchParameters to the connector instance with onSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers a widgetManager update on props change","location":null,"status":"passed","title":"triggers a widgetManager update on props change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger a widgetManager update when props do not change","location":null,"status":"passed","title":"does not trigger a widgetManager update when props do not change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers an onSearchStateChange on props change with transitionState","location":null,"status":"passed","title":"triggers an onSearchStateChange on props change with transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger an onSearchStateChange on props change without transitionState","location":null,"status":"passed","title":"does not trigger an onSearchStateChange on props change without transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget unregisters itself on unmount","location":null,"status":"passed","title":"unregisters itself on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp without empty keys on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp without empty keys on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns the widget search parameters when getSearchParameters is provided","location":null,"status":"passed","title":"returns the widget search parameters when getSearchParameters is provided"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns null when getSearchParameters is not provided","location":null,"status":"passed","title":"returns null when getSearchParameters is not provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns the widget metadata when getMetadata is provided","location":null,"status":"passed","title":"returns the widget metadata when getMetadata is provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns an empty object when getMetadata is not provided","location":null,"status":"passed","title":"returns an empty object when getMetadata is not provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the widget transitionState when transitionState is provided","location":null,"status":"passed","title":"returns the widget transitionState when transitionState is provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the given next state when transitionState is not provided","location":null,"status":"passed","title":"returns the given next state when transitionState is not provided"},{"ancestorTitles":["createConnector","refine"],"failureMessages":[],"fullName":"createConnector refine passes a refine method to the component","location":null,"status":"passed","title":"passes a refine method to the component"},{"ancestorTitles":["createConnector","createURL"],"failureMessages":[],"fullName":"createConnector createURL passes a createURL method to the component","location":null,"status":"passed","title":"passes a createURL method to the component"},{"ancestorTitles":["createConnector","wrapped with VisionProvider"],"failureMessages":[],"fullName":"createConnector wrapped with VisionProvider default export reads from context","location":null,"status":"passed","title":"default export reads from context"}],"endTime":1573502608618,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createConnector.test.js","startTime":1573502606893,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["findResultsState"],"failureMessages":[],"fullName":"findResultsState throws an error if props are not provided","location":null,"status":"passed","title":"throws an error if props are not provided"},{"ancestorTitles":["findResultsState"],"failureMessages":[],"fullName":"findResultsState throws an error if props does not have a `searchClient`","location":null,"status":"passed","title":"throws an error if props does not have a `searchClient`"},{"ancestorTitles":["findResultsState"],"failureMessages":[],"fullName":"findResultsState throws an error if props does not have an `indexName`","location":null,"status":"passed","title":"throws an error if props does not have an `indexName`"},{"ancestorTitles":["findResultsState"],"failureMessages":[],"fullName":"findResultsState adds expected Clinia agents","location":null,"status":"passed","title":"adds expected Clinia agents"},{"ancestorTitles":["findResultsState"],"failureMessages":[],"fullName":"findResultsState does not throw if `searchClient` does not have a `addCliniaAgent()` method","location":null,"status":"passed","title":"does not throw if `searchClient` does not have a `addCliniaAgent()` method"},{"ancestorTitles":["findResultsState","single index"],"failureMessages":[],"fullName":"findResultsState single index results should be state & results","location":null,"status":"passed","title":"results should be state & results"},{"ancestorTitles":["findResultsState","single index"],"failureMessages":[],"fullName":"findResultsState single index searchParameters should be cleaned each time","location":null,"status":"passed","title":"searchParameters should be cleaned each time"},{"ancestorTitles":["findResultsState","single index"],"failureMessages":[],"fullName":"findResultsState single index without search state","location":null,"status":"passed","title":"without search state"},{"ancestorTitles":["findResultsState","single index"],"failureMessages":[],"fullName":"findResultsState single index with search state","location":null,"status":"passed","title":"with search state"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index results should be instance of SearchResults and SearchParameters","location":null,"status":"passed","title":"results should be instance of SearchResults and SearchParameters"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index searchParameters should be cleaned each time","location":null,"status":"passed","title":"searchParameters should be cleaned each time"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index without search state - first API","location":null,"status":"passed","title":"without search state - first API"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index without search state - second API","location":null,"status":"passed","title":"without search state - second API"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index without search state - same index","location":null,"status":"passed","title":"without search state - same index"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index with search state - first API","location":null,"status":"passed","title":"with search state - first API"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index with search state - second API","location":null,"status":"passed","title":"with search state - second API"},{"ancestorTitles":["findResultsState","multi index"],"failureMessages":[],"fullName":"findResultsState multi index with search state - same index","location":null,"status":"passed","title":"with search state - same index"}],"endTime":1573502608819,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/core/__tests__/createVisionServer.js","startTime":1573502606887,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox applies its default props wuth custom className","location":null,"status":"passed","title":"applies its default props wuth custom className"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox applies its default props wuth custom style","location":null,"status":"passed","title":"applies its default props wuth custom style"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox transfers the autoFocus prop to the underlying input element","location":null,"status":"passed","title":"transfers the autoFocus prop to the underlying input element"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox transfers the disabled prop to the underlying input element","location":null,"status":"passed","title":"transfers the disabled prop to the underlying input element"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox treats its query prop as its input value","location":null,"status":"passed","title":"treats its query prop as its input value"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox lets you customize its theme","location":null,"status":"passed","title":"lets you customize its theme"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox lets you give custom components for clear and submit","location":null,"status":"passed","title":"lets you give custom components for clear and submit"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox lets you customize its translations","location":null,"status":"passed","title":"lets you customize its translations"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should render the loader if showLoadingIndicator is true","location":null,"status":"passed","title":"should render the loader if showLoadingIndicator is true"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox treats query as a default value when searchAsYouType=false","location":null,"status":"passed","title":"treats query as a default value when searchAsYouType=false"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox refines its value on change when searchAsYouType=true","location":null,"status":"passed","title":"refines its value on change when searchAsYouType=true"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox only refines its query on submit when searchAsYouType=false","location":null,"status":"passed","title":"only refines its query on submit when searchAsYouType=false"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox onSubmit behavior should be override if provided as props","location":null,"status":"passed","title":"onSubmit behavior should be override if provided as props"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox focuses the input when one of the keys in focusShortcuts is pressed","location":null,"status":"passed","title":"focuses the input when one of the keys in focusShortcuts is pressed"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should accept `on*` events","location":null,"status":"passed","title":"should accept `on*` events"}],"endTime":1573502608948,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/SearchBox.test.js","startTime":1573502606894,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision validates its props","location":null,"status":"passed","title":"validates its props"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision correctly instantiates the visionManager","location":null,"status":"passed","title":"correctly instantiates the visionManager"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision updates Clinia client when new one is given in props","location":null,"status":"passed","title":"updates Clinia client when new one is given in props"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":[],"fullName":"Vision createHrefForState passes through to createURL when it is defined","location":null,"status":"passed","title":"passes through to createURL when it is defined"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":[],"fullName":"Vision createHrefForState returns # otherwise","location":null,"status":"passed","title":"returns # otherwise"}],"endTime":1573502609275,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/widgets/__tests__/Vision.js","startTime":1573502608639,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index accumulate records internally","location":null,"status":"passed","title":"accumulate records internally"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index prepend records internally","location":null,"status":"passed","title":"prepend records internally"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index accumulate records internally while changing perPage configuration","location":null,"status":"passed","title":"accumulate records internally while changing perPage configuration"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index should not reset while accumulating results","location":null,"status":"passed","title":"should not reset while accumulating results"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index Indicates the last page after several pages","location":null,"status":"passed","title":"Indicates the last page after several pages"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index calls refine with next page when calling refineNext","location":null,"status":"passed","title":"calls refine with next page when calling refineNext"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index calls refine with previous page when calling refinePrevious","location":null,"status":"passed","title":"calls refine with previous page when calling refinePrevious"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index adds 1 to page when calling refine","location":null,"status":"passed","title":"adds 1 to page when calling refine"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index set page to the corresponding index","location":null,"status":"passed","title":"set page to the corresponding index"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index automatically converts String state to Number","location":null,"status":"passed","title":"automatically converts String state to Number"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index expect to always return an array of records","location":null,"status":"passed","title":"expect to always return an array of records"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index accumulate records internally","location":null,"status":"passed","title":"accumulate records internally"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index prepend records internally","location":null,"status":"passed","title":"prepend records internally"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index accumulate records internally while changing perPage configuration","location":null,"status":"passed","title":"accumulate records internally while changing perPage configuration"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index should not accumulate records internally while changing query","location":null,"status":"passed","title":"should not accumulate records internally while changing query"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index should not reset while accumulating results","location":null,"status":"passed","title":"should not reset while accumulating results"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index Indicates the last page after several pages","location":null,"status":"passed","title":"Indicates the last page after several pages"}],"endTime":1573502609420,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectInfiniteHits.test.js","startTime":1573502608848,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index registers itself on mount","location":null,"status":"passed","title":"registers itself on mount"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index calls onSearchParameters on mount","location":null,"status":"passed","title":"calls onSearchParameters on mount"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index calls update if indexName props changes","location":null,"status":"passed","title":"calls update if indexName props changes"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index unregisters itself on unmount","location":null,"status":"passed","title":"unregisters itself on unmount"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index exposes multi index context","location":null,"status":"passed","title":"exposes multi index context"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index provides search parameters from instance props","location":null,"status":"passed","title":"provides search parameters from instance props"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index provides search parameters from argument props when instance props are not available","location":null,"status":"passed","title":"provides search parameters from argument props when instance props are not available"},{"ancestorTitles":["Index"],"failureMessages":[],"fullName":"Index wrapped with VisionProvider: sets correct props","location":null,"status":"passed","title":"wrapped with VisionProvider: sets correct props"}],"endTime":1573502609478,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/widgets/__tests__/Index.js","startTime":1573502608985,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker","location":null,"status":"passed","title":"expect to create a marker"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom anchor","location":null,"status":"passed","title":"expect to create a marker with a custom anchor"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom className","location":null,"status":"passed","title":"expect to create a marker with a custom className"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to append the element to the overlay","location":null,"status":"passed","title":"expect to append the element to the overlay"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to not append the element to the overlay when panes are not available","location":null,"status":"passed","title":"expect to not append the element to the overlay when panes are not available"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct position on the element","location":null,"status":"passed","title":"expect to set the correct position on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct zIndex on the element","location":null,"status":"passed","title":"expect to set the correct zIndex on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to not set the correct position when the projection is not available","location":null,"status":"passed","title":"expect to not set the correct position when the projection is not available"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove the element","location":null,"status":"passed","title":"expect to remove the element"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove all the listeners","location":null,"status":"passed","title":"expect to remove all the listeners"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to register listener","location":null,"status":"passed","title":"expect to register listener"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to return a function to remove the listener","location":null,"status":"passed","title":"expect to return a function to remove the listener"},{"ancestorTitles":["createHTMLMarker","getPosition"],"failureMessages":[],"fullName":"createHTMLMarker getPosition expect to return the latLng","location":null,"status":"passed","title":"expect to return the latLng"}],"endTime":1573502609626,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/elements/__tests__/createHTMLMarker.js","startTime":1573502609305,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API","location":null,"status":"passed","title":"expect to call Google Maps API"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom API Key","location":null,"status":"passed","title":"expect to call Google Maps API with a custom API Key"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom endpoint","location":null,"status":"passed","title":"expect to call Google Maps API with a custom endpoint"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to render nothing when it's loading","location":null,"status":"passed","title":"expect to render nothing when it's loading"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call children with the Google object when it's loaded","location":null,"status":"passed","title":"expect to call children with the Google object when it's loaded"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to not call setState when we unmount before loading is complete","location":null,"status":"passed","title":"expect to not call setState when we unmount before loading is complete"}],"endTime":1573502609814,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.jsdom.js","startTime":1573502609433,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should reset indices page to 1 with resetPage","location":null,"status":"passed","title":"refine shared widgets should reset indices page to 1 with resetPage"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should not reset indices page to 1 without resetPage","location":null,"status":"passed","title":"refine shared widgets should not reset indices page to 1 without resetPage"}],"endTime":1573502609890,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/indexUtils.js","startTime":1573502609487,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"},{"ancestorTitles":["connectSearchBox","multi index"],"failureMessages":[],"fullName":"connectSearchBox multi index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectSearchBox","multi index"],"failureMessages":[],"fullName":"connectSearchBox multi index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectSearchBox","multi index"],"failureMessages":[],"fullName":"connectSearchBox multi index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectSearchBox","multi index"],"failureMessages":[],"fullName":"connectSearchBox multi index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectSearchBox","multi index"],"failureMessages":[],"fullName":"connectSearchBox multi index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1573502609977,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectSearchBox.test.js","startTime":1573502609636,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectAutoComplete","suggestions"],"failureMessages":[],"fullName":"connectAutoComplete suggestions provides the current suggestions to the component","location":null,"status":"passed","title":"provides the current suggestions to the component"},{"ancestorTitles":["connectAutoComplete","suggestions"],"failureMessages":[],"fullName":"connectAutoComplete suggestions doesn't render when no suggestions are available","location":null,"status":"passed","title":"doesn't render when no suggestions are available"},{"ancestorTitles":["connectAutoComplete","single index"],"failureMessages":[],"fullName":"connectAutoComplete single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectAutoComplete","single index"],"failureMessages":[],"fullName":"connectAutoComplete single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectAutoComplete","single index"],"failureMessages":[],"fullName":"connectAutoComplete single index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectAutoComplete","single index"],"failureMessages":[],"fullName":"connectAutoComplete single index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectAutoComplete","single index"],"failureMessages":[],"fullName":"connectAutoComplete single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"},{"ancestorTitles":["connectAutoComplete","multi index"],"failureMessages":[],"fullName":"connectAutoComplete multi index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectAutoComplete","multi index"],"failureMessages":[],"fullName":"connectAutoComplete multi index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectAutoComplete","multi index"],"failureMessages":[],"fullName":"connectAutoComplete multi index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectAutoComplete","multi index"],"failureMessages":[],"fullName":"connectAutoComplete multi index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectAutoComplete","multi index"],"failureMessages":[],"fullName":"connectAutoComplete multi index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1573502610152,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectAutoComplete.test.js","startTime":1573502609829,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator applies its default props","location":null,"status":"passed","title":"applies its default props"}],"endTime":1573502610242,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/LoadingIndicator.test.tsx","startTime":1573502609903,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits accepts a hit prop","location":null,"status":"passed","title":"accepts a hit prop"},{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits accepts a custom className","location":null,"status":"passed","title":"accepts a custom className"}],"endTime":1573502610394,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.tsx","startTime":1573502609991,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index refines the perPage parameter","location":null,"status":"passed","title":"refines the perPage parameter"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index registers its id in metadata","location":null,"status":"passed","title":"registers its id in metadata"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1573502610546,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHitsPerPage.test.js","startTime":1573502610257,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from classes","location":null,"status":"passed","title":"gets the right displayName from classes"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from stateless components","location":null,"status":"passed","title":"gets the right displayName from stateless components"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName sets a default displayName when not able to find one","location":null,"status":"passed","title":"sets a default displayName when not able to find one"},{"ancestorTitles":["utils","defer"],"failureMessages":[],"fullName":"utils defer calling a function asynchronously, should be done as soon as possible.","location":null,"status":"passed","title":"calling a function asynchronously, should be done as soon as possible."},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key empty key should be removed","location":null,"status":"passed","title":"empty key should be removed"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not do anything on empty root","location":null,"status":"passed","title":"does not do anything on empty root"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does empty out objects","location":null,"status":"passed","title":"does empty out objects"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not empty out arrays","location":null,"status":"passed","title":"does not empty out arrays"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 1 and 2 on page 0","location":null,"status":"passed","title":"should add __positions 1 and 2 on page 0"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 5 and 6 on page 2","location":null,"status":"passed","title":"should add __positions 5 and 6 on page 2"},{"ancestorTitles":["utils","addQueryID"],"failureMessages":[],"fullName":"utils addQueryID should passed __queryID to records","location":null,"status":"passed","title":"should passed __queryID to records"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined on non-object root","location":null,"status":"passed","title":"returns undefined on non-object root"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns path if exists","location":null,"status":"passed","title":"returns path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath accepts a pre-split path as array","location":null,"status":"passed","title":"accepts a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath does not split a pre-split path as array","location":null,"status":"passed","title":"does not split a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if does not exist","location":null,"status":"passed","title":"returns undefined if does not exist"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns indexed path if exists","location":null,"status":"passed","title":"returns indexed path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if indexed path does not exist","location":null,"status":"passed","title":"returns undefined if indexed path does not exist"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1573502610548,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/utils.js","startTime":1573502610171,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectConfigure","single index"],"failureMessages":[],"fullName":"connectConfigure single index propagates the props to the SearchParameters without children & contextValue","location":null,"status":"passed","title":"propagates the props to the SearchParameters without children & contextValue"},{"ancestorTitles":["connectConfigure","single index"],"failureMessages":[],"fullName":"connectConfigure single index calling transitionState should add configure parameters to the search state","location":null,"status":"passed","title":"calling transitionState should add configure parameters to the search state"},{"ancestorTitles":["connectConfigure","single index"],"failureMessages":[],"fullName":"connectConfigure single index calling cleanUp should remove configure parameters from the search state","location":null,"status":"passed","title":"calling cleanUp should remove configure parameters from the search state"},{"ancestorTitles":["connectConfigure","multi index"],"failureMessages":[],"fullName":"connectConfigure multi index it propagates the props to the SearchParameters without children","location":null,"status":"passed","title":"it propagates the props to the SearchParameters without children"},{"ancestorTitles":["connectConfigure","multi index"],"failureMessages":[],"fullName":"connectConfigure multi index calling transitionState should add configure parameters to the search state","location":null,"status":"passed","title":"calling transitionState should add configure parameters to the search state"},{"ancestorTitles":["connectConfigure","multi index"],"failureMessages":[],"fullName":"connectConfigure multi index calling cleanUp should remove configure parameters from the search state","location":null,"status":"passed","title":"calling cleanUp should remove configure parameters from the search state"}],"endTime":1573502610684,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectConfigure.test.js","startTime":1573502610408,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createVisionManager"],"failureMessages":[],"fullName":"createVisionManager initializes the manager with an empty state","location":null,"status":"passed","title":"initializes the manager with an empty state"}],"endTime":1573502610840,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.test.js","startTime":1573502610559,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable provides a translate prop to the composed component","location":null,"status":"passed","title":"provides a translate prop to the composed component"},{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable uses the translations passed as props before the default","location":null,"status":"passed","title":"uses the translations passed as props before the default"}],"endTime":1573502610888,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/translatable.js","startTime":1573502610578,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames","location":null,"status":"passed","title":"expect to return classNames"},{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames with custom prefix","location":null,"status":"passed","title":"expect to return classNames with custom prefix"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if a modifier key is pressed","location":null,"status":"passed","title":"returns true if a modifier key is pressed"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if it's a middle click","location":null,"status":"passed","title":"returns true if it's a middle click"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns false otherwise","location":null,"status":"passed","title":"returns false otherwise"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize capitalizes a string","location":null,"status":"passed","title":"capitalizes a string"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize works with empty strings","location":null,"status":"passed","title":"works with empty strings"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end","location":null,"status":"passed","title":"with end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with start and end","location":null,"status":"passed","title":"with start and end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end and step","location":null,"status":"passed","title":"with end and step"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range rounds decimal array lengths","location":null,"status":"passed","title":"rounds decimal array lengths"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1573502610985,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/core/__tests__/utils.js","startTime":1573502610709,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() it does not break when there is a missing attribute","location":null,"status":"passed","title":"it does not break when there is a missing attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is no tag","location":null,"status":"passed","title":"creates a single element when there is no tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is only a tag","location":null,"status":"passed","title":"creates a single element when there is only a tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() fetches and parses a deep attribute","location":null,"status":"passed","title":"fetches and parses a deep attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - 1 big highlight","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - 1 big highlight"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() supports the array format, parses it and returns the part that is highlighted","location":null,"status":"passed","title":"supports the array format, parses it and returns the part that is highlighted"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - same pre and post tag","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - same pre and post tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `null`","location":null,"status":"passed","title":"throws when hit is `null`"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `undefined`","location":null,"status":"passed","title":"throws when hit is `undefined`"}],"endTime":1573502611131,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/highlight.js","startTime":1573502610862,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners from events","location":null,"status":"passed","title":"expect to add listeners from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners with event & marker","location":null,"status":"passed","title":"expect to add listeners with event & marker"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from events","location":null,"status":"passed","title":"expect to only add listeners listed from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from props","location":null,"status":"passed","title":"expect to only add listeners listed from props"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to return a function that remove the listeners","location":null,"status":"passed","title":"expect to return a function that remove the listeners"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an object with listeners propType from event types","location":null,"status":"passed","title":"expect to return an object with listeners propType from event types"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an empty object from empty event types","location":null,"status":"passed","title":"expect to return an empty object from empty event types"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an object without excluded keys","location":null,"status":"passed","title":"expect to return an object without excluded keys"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return the given props when excluded keys is empty","location":null,"status":"passed","title":"expect to return the given props when excluded keys is empty"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an empty object when all keys are excluded","location":null,"status":"passed","title":"expect to return an empty object when all keys are excluded"}],"endTime":1573502611180,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/utils.js","startTime":1573502610905,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index adds positions to the records provided to the component","location":null,"status":"passed","title":"adds positions to the records provided to the component"},{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index doesn't render when no records are available","location":null,"status":"passed","title":"doesn't render when no records are available"},{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index should return the searchParameters unchanged","location":null,"status":"passed","title":"should return the searchParameters unchanged"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index adds positions to the records provided to the component","location":null,"status":"passed","title":"adds positions to the records provided to the component"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index doesn't render when no records are available","location":null,"status":"passed","title":"doesn't render when no records are available"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index should return the searchParameters unchanged","location":null,"status":"passed","title":"should return the searchParameters unchanged"}],"endTime":1573502611255,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHits.test.js","startTime":1573502610999,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectSuggestionResults"],"failureMessages":[],"fullName":"connectSuggestionResults provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"}],"endTime":1573502611370,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectSuggestionResults.test.js","startTime":1573502611150,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createStore","getState"],"failureMessages":[],"fullName":"createStore getState retrieves the current state of the store","location":null,"status":"passed","title":"retrieves the current state of the store"},{"ancestorTitles":["createStore","setState"],"failureMessages":[],"fullName":"createStore setState sets a new state","location":null,"status":"passed","title":"sets a new state"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe subscribes to new states","location":null,"status":"passed","title":"subscribes to new states"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe returns a method to unsubscribe","location":null,"status":"passed","title":"returns a method to unsubscribe"}],"endTime":1573502611428,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createStore.test.js","startTime":1573502611190,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget adds the widget to the widgets list","location":null,"status":"passed","title":"adds the widget to the widgets list"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget returns an unregister method","location":null,"status":"passed","title":"returns an unregister method"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget schedules an update","location":null,"status":"passed","title":"schedules an update"},{"ancestorTitles":["createWidgetsManager","update"],"failureMessages":[],"fullName":"createWidgetsManager update schedules an update","location":null,"status":"passed","title":"schedules an update"}],"endTime":1573502611476,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createWidgetsManager.js","startTime":1573502611265,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to require the file in a Node environment","location":null,"status":"passed","title":"expect to require the file in a Node environment"}],"endTime":1573502611584,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.node.js","startTime":1573502611406,"status":"passed","summary":""}],"wasInterrupted":false}