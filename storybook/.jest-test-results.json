{"numFailedTestSuites":2,"numFailedTests":5,"numPassedTestSuites":19,"numPassedTests":206,"numPendingTestSuites":0,"numPendingTests":0,"numRuntimeErrorTestSuites":0,"numTodoTests":0,"numTotalTestSuites":21,"numTotalTests":211,"openHandles":[],"snapshot":{"added":0,"didUpdate":false,"failure":false,"filesAdded":0,"filesRemoved":0,"filesRemovedList":[],"filesUnmatched":0,"filesUpdated":0,"matched":4,"total":4,"unchecked":0,"uncheckedKeysByFile":[],"unmatched":0,"updated":0},"startTime":1573060126340,"success":false,"testResults":[{"assertionResults":[{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectHits","single index"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"records\": Array [\u001b[22m\n\u001b[2m      Object {\u001b[22m\n\u001b[32m-       \"__position\": 5,\u001b[39m\n\u001b[31m+       \"__position\": NaN,\u001b[39m\n\u001b[2m      },\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m  }\u001b[22m\n    at Object.toEqual (/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHits.js:27:21)\n    at Object.asyncJestTest (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"fullName":"connectHits single index adds positions to the records provided to the component","location":null,"status":"failed","title":"adds positions to the records provided to the component"},{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index doesn't render when no records are available","location":null,"status":"passed","title":"doesn't render when no records are available"},{"ancestorTitles":["connectHits","single index"],"failureMessages":[],"fullName":"connectHits single index should return the searchParameters unchanged","location":null,"status":"passed","title":"should return the searchParameters unchanged"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n\u001b[32m- Expected\u001b[39m\n\u001b[31m+ Received\u001b[39m\n\n\u001b[2m  Object {\u001b[22m\n\u001b[2m    \"records\": Array [\u001b[22m\n\u001b[2m      Object {\u001b[22m\n\u001b[32m-       \"__position\": 5,\u001b[39m\n\u001b[31m+       \"__position\": NaN,\u001b[39m\n\u001b[2m      },\u001b[22m\n\u001b[2m    ],\u001b[22m\n\u001b[2m  }\u001b[22m\n    at Object.toEqual (/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHits.js:76:21)\n    at Object.asyncJestTest (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"fullName":"connectHits multi index adds positions to the records provided to the component","location":null,"status":"failed","title":"adds positions to the records provided to the component"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index doesn't render when no records are available","location":null,"status":"passed","title":"doesn't render when no records are available"},{"ancestorTitles":["connectHits","multi index"],"failureMessages":[],"fullName":"connectHits multi index should return the searchParameters unchanged","location":null,"status":"passed","title":"should return the searchParameters unchanged"}],"endTime":1573060130572,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mconnectHits › single index › adds positions to the records provided to the component\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"records\": Array [\u001b[22m\n    \u001b[2m      Object {\u001b[22m\n    \u001b[32m-       \"__position\": 5,\u001b[39m\n    \u001b[31m+       \"__position\": NaN,\u001b[39m\n    \u001b[2m      },\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 25 | \u001b[39m        results\u001b[33m:\u001b[39m { records\u001b[33m,\u001b[39m meta\u001b[33m:\u001b[39m { perPage\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m\u001b[33m,\u001b[39m currentPage\u001b[33m:\u001b[39m \u001b[35m2\u001b[39m } }\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 26 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 27 | \u001b[39m      expect(props)\u001b[33m.\u001b[39mtoEqual({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                    \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 28 | \u001b[39m        records\u001b[33m:\u001b[39m [{ __position\u001b[33m:\u001b[39m \u001b[35m5\u001b[39m }]\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 29 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 30 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/connectors/__tests__/connectHits.js\u001b[39m\u001b[0m\u001b[2m:27:21)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mconnectHits › multi index › adds positions to the records provided to the component\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoEqual\u001b[2m(\u001b[22m\u001b[32mexpected\u001b[39m\u001b[2m) // deep equality\u001b[22m\n\n    \u001b[32m- Expected\u001b[39m\n    \u001b[31m+ Received\u001b[39m\n\n    \u001b[2m  Object {\u001b[22m\n    \u001b[2m    \"records\": Array [\u001b[22m\n    \u001b[2m      Object {\u001b[22m\n    \u001b[32m-       \"__position\": 5,\u001b[39m\n    \u001b[31m+       \"__position\": NaN,\u001b[39m\n    \u001b[2m      },\u001b[22m\n    \u001b[2m    ],\u001b[22m\n    \u001b[2m  }\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 74 | \u001b[39m        }\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 75 | \u001b[39m      )\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 76 | \u001b[39m      expect(props)\u001b[33m.\u001b[39mtoEqual({\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                    \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 77 | \u001b[39m        records\u001b[33m:\u001b[39m [{ __position\u001b[33m:\u001b[39m \u001b[35m5\u001b[39m }]\u001b[33m,\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 78 | \u001b[39m      })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 79 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toEqual (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-core/src/connectors/__tests__/connectHits.js\u001b[39m\u001b[0m\u001b[2m:76:21)\u001b[2m\u001b[22m\n","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHits.js","startTime":1573060128148,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits should render with default hit component","location":null,"status":"passed","title":"should render with default hit component"},{"ancestorTitles":["Hits"],"failureMessages":[],"fullName":"Hits should render with default no results found","location":null,"status":"passed","title":"should render with default no results found"},{"ancestorTitles":["Hits","Style tests"],"failureMessages":[],"fullName":"Hits Style tests should render main div with className props ","location":null,"status":"passed","title":"should render main div with className props "},{"ancestorTitles":["Hits","Style tests"],"failureMessages":[],"fullName":"Hits Style tests should render main div with style props ","location":null,"status":"passed","title":"should render main div with style props "},{"ancestorTitles":["Hits","Custom inner components"],"failureMessages":["Error: \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\nReceived: \u001b[31mfalse\u001b[39m\n    at Object.toBeTruthy (/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.js:60:52)\n    at Object.asyncJestTest (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"fullName":"Hits Custom inner components should render with custom hit component","location":null,"status":"failed","title":"should render with custom hit component"},{"ancestorTitles":["Hits","Custom inner components"],"failureMessages":[],"fullName":"Hits Custom inner components should render with custom noResultsFound component","location":null,"status":"passed","title":"should render with custom noResultsFound component"},{"ancestorTitles":["Hits","DefaultHit"],"failureMessages":["Error: Method “text” is meant to be run on 1 node. 0 found instead.\n    at ReactWrapper.single (/Users/etienne/Projects/clinia/react-vision/node_modules/enzyme/src/ReactWrapper.js:1166:13)\n    at ReactWrapper.single [as text] (/Users/etienne/Projects/clinia/react-vision/node_modules/enzyme/src/ReactWrapper.js:629:17)\n    at Object.text (/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.js:80:27)\n    at Object.asyncJestTest (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"fullName":"Hits DefaultHit should render with DefaultHit with resource id in the title","location":null,"status":"failed","title":"should render with DefaultHit with resource id in the title"},{"ancestorTitles":["Hits","DefaultHit"],"failureMessages":["Error: Method “text” is meant to be run on 1 node. 0 found instead.\n    at ReactWrapper.single (/Users/etienne/Projects/clinia/react-vision/node_modules/enzyme/src/ReactWrapper.js:1166:13)\n    at ReactWrapper.single [as text] (/Users/etienne/Projects/clinia/react-vision/node_modules/enzyme/src/ReactWrapper.js:629:17)\n    at Object.text (/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.js:91:30)\n    at Object.asyncJestTest (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/jasmineAsyncInstall.js:102:37)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:43:12\n    at new Promise (<anonymous>)\n    at mapper (/Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:26:19)\n    at /Users/etienne/Projects/clinia/react-vision/node_modules/jest-jasmine2/build/queueRunner.js:73:41\n    at processTicksAndRejections (internal/process/task_queues.js:89:5)"],"fullName":"Hits DefaultHit should render DefaultHit with the resource as a JSON in the card body","location":null,"status":"failed","title":"should render DefaultHit with the resource as a JSON in the card body"}],"endTime":1573060131601,"message":"\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mHits › Custom inner components › should render with custom hit component\u001b[39m\u001b[22m\n\n    \u001b[2mexpect(\u001b[22m\u001b[31mreceived\u001b[39m\u001b[2m).\u001b[22mtoBeTruthy\u001b[2m()\u001b[22m\n\n    Received: \u001b[31mfalse\u001b[39m\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 58 | \u001b[39m      )\u001b[33m.\u001b[39mdive()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 59 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 60 | \u001b[39m      expect(wrapper\u001b[33m.\u001b[39mcontains(customHitComponent))\u001b[33m.\u001b[39mtoBeTruthy()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                                                   \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 61 | \u001b[39m      expect(wrapper\u001b[33m.\u001b[39mexists(\u001b[32m'.default-hit-no-results-found'\u001b[39m))\u001b[33m.\u001b[39mtoBeFalsy()\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 62 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 63 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.toBeTruthy (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-dom/src/components/__tests__/Hits.test.js\u001b[39m\u001b[0m\u001b[2m:60:52)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mHits › DefaultHit › should render with DefaultHit with resource id in the title\u001b[39m\u001b[22m\n\n    Method “text” is meant to be run on 1 node. 0 found instead.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 78 | \u001b[39m      \u001b[36mconst\u001b[39m titleElement \u001b[33m=\u001b[39m wrapper\u001b[33m.\u001b[39mfind(\u001b[32m'.default-hit-title'\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 79 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 80 | \u001b[39m      expect(titleElement\u001b[33m.\u001b[39mtext())\u001b[33m.\u001b[39mtoEqual(results[\u001b[35m0\u001b[39m]\u001b[33m.\u001b[39mid)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                          \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 81 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 82 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 83 | \u001b[39m    it(\u001b[32m'should render DefaultHit with the resource as a JSON in the card body'\u001b[39m\u001b[33m,\u001b[39m () \u001b[33m=>\u001b[39m {\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ReactWrapper.single (\u001b[2mnode_modules/enzyme/src/ReactWrapper.js\u001b[2m:1166:13)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ReactWrapper.single [as text] (\u001b[2mnode_modules/enzyme/src/ReactWrapper.js\u001b[2m:629:17)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.text (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-dom/src/components/__tests__/Hits.test.js\u001b[39m\u001b[0m\u001b[2m:80:27)\u001b[2m\u001b[22m\n\n\u001b[1m\u001b[31m  \u001b[1m● \u001b[1mHits › DefaultHit › should render DefaultHit with the resource as a JSON in the card body\u001b[39m\u001b[22m\n\n    Method “text” is meant to be run on 1 node. 0 found instead.\n\u001b[2m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 89 | \u001b[39m      \u001b[36mconst\u001b[39m expectedResult \u001b[33m=\u001b[39m \u001b[33mJSON\u001b[39m\u001b[33m.\u001b[39mstringify(results[\u001b[35m0\u001b[39m]\u001b[33m,\u001b[39m \u001b[36mnull\u001b[39m\u001b[33m,\u001b[39m \u001b[35m2\u001b[39m)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 90 | \u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m\u001b[31m\u001b[1m>\u001b[2m\u001b[39m\u001b[90m 91 | \u001b[39m      expect(cardBodyElement\u001b[33m.\u001b[39mtext())\u001b[33m.\u001b[39mtoEqual(expectedResult)\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m    | \u001b[39m                             \u001b[31m\u001b[1m^\u001b[2m\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 92 | \u001b[39m    })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 93 | \u001b[39m  })\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m    \u001b[0m \u001b[90m 94 | \u001b[39m})\u001b[33m;\u001b[39m\u001b[0m\u001b[22m\n\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ReactWrapper.single (\u001b[2mnode_modules/enzyme/src/ReactWrapper.js\u001b[2m:1166:13)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat ReactWrapper.single [as text] (\u001b[2mnode_modules/enzyme/src/ReactWrapper.js\u001b[2m:629:17)\u001b[2m\u001b[22m\n\u001b[2m      \u001b[2mat Object.text (\u001b[2m\u001b[0m\u001b[36mpackages/react-vision-dom/src/components/__tests__/Hits.test.js\u001b[39m\u001b[0m\u001b[2m:91:30)\u001b[2m\u001b[22m\n","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/Hits.test.js","startTime":1573060128177,"status":"failed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API","location":null,"status":"passed","title":"expect to call Google Maps API"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom API Key","location":null,"status":"passed","title":"expect to call Google Maps API with a custom API Key"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call Google Maps API with a custom endpoint","location":null,"status":"passed","title":"expect to call Google Maps API with a custom endpoint"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to render nothing when it's loading","location":null,"status":"passed","title":"expect to render nothing when it's loading"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to call children with the Google object when it's loaded","location":null,"status":"passed","title":"expect to call children with the Google object when it's loaded"},{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to not call setState when we unmount before loading is complete","location":null,"status":"passed","title":"expect to not call setState when we unmount before loading is complete"}],"endTime":1573060131634,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.jsdom.js","startTime":1573060130694,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should have focus after render when autoFocus prop is true","location":null,"status":"passed","title":"should have focus after render when autoFocus prop is true"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should initialize state with empty query","location":null,"status":"passed","title":"should initialize state with empty query"},{"ancestorTitles":["SearchBox"],"failureMessages":[],"fullName":"SearchBox should render input disabled when \"disabled\" props is true","location":null,"status":"passed","title":"should render input disabled when \"disabled\" props is true"},{"ancestorTitles":["SearchBox","Style tests"],"failureMessages":[],"fullName":"SearchBox Style tests should render main div with className props","location":null,"status":"passed","title":"should render main div with className props"},{"ancestorTitles":["SearchBox","Style tests"],"failureMessages":[],"fullName":"SearchBox Style tests should render main div with style props ","location":null,"status":"passed","title":"should render main div with style props "},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom loading indicator","location":null,"status":"passed","title":"should render with custom loading indicator"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should not render with custom loading indicator when \"showLoadingIndicator\" props is false","location":null,"status":"passed","title":"should not render with custom loading indicator when \"showLoadingIndicator\" props is false"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should not render with custom loading indicator when \"loading\" props is false","location":null,"status":"passed","title":"should not render with custom loading indicator when \"loading\" props is false"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom clear button","location":null,"status":"passed","title":"should render with custom clear button"},{"ancestorTitles":["SearchBox","Custom inner components"],"failureMessages":[],"fullName":"SearchBox Custom inner components should render with custom submit button","location":null,"status":"passed","title":"should render with custom submit button"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should update state on default input change","location":null,"status":"passed","title":"should update state on default input change"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should not submit on default input change when \"searchAsYouType\" prop is not valid ","location":null,"status":"passed","title":"should not submit on default input change when \"searchAsYouType\" prop is not valid "},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should submit on default input change when \"searchAsYouType\" prop is true ","location":null,"status":"passed","title":"should submit on default input change when \"searchAsYouType\" prop is true "},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should call submit on form submit","location":null,"status":"passed","title":"should call submit on form submit"},{"ancestorTitles":["SearchBox","Event tests","Default events"],"failureMessages":[],"fullName":"SearchBox Event tests Default events should clear state on default clear search click","location":null,"status":"passed","title":"should clear state on default clear search click"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onBlur on input blur","location":null,"status":"passed","title":"should trigger onBlur on input blur"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onChange on input change","location":null,"status":"passed","title":"should trigger onChange on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onClear on input change","location":null,"status":"passed","title":"should trigger onClear on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onFocus on input focus","location":null,"status":"passed","title":"should trigger onFocus on input focus"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onInput on input change","location":null,"status":"passed","title":"should trigger onInput on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onKeyPress on input change","location":null,"status":"passed","title":"should trigger onKeyPress on input change"},{"ancestorTitles":["SearchBox","Event tests","Custom events"],"failureMessages":[],"fullName":"SearchBox Event tests Custom events should trigger onSubmit on input change","location":null,"status":"passed","title":"should trigger onSubmit on input change"}],"endTime":1573060131684,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/SearchBox.test.js","startTime":1573060128185,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable provides a translate prop to the composed component","location":null,"status":"passed","title":"provides a translate prop to the composed component"},{"ancestorTitles":["translatable"],"failureMessages":[],"fullName":"translatable uses the translations passed as props before the default","location":null,"status":"passed","title":"uses the translations passed as props before the default"}],"endTime":1573060132602,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/translatable.js","startTime":1573060131846,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision validates its props","location":null,"status":"passed","title":"validates its props"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision correctly instantiates the visionManager","location":null,"status":"passed","title":"correctly instantiates the visionManager"},{"ancestorTitles":["Vision"],"failureMessages":[],"fullName":"Vision updates Clinia client when new one is given in props","location":null,"status":"passed","title":"updates Clinia client when new one is given in props"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":[],"fullName":"Vision createHrefForState passes through to createURL when it is defined","location":null,"status":"passed","title":"passes through to createURL when it is defined"},{"ancestorTitles":["Vision","createHrefForState"],"failureMessages":[],"fullName":"Vision createHrefForState returns # otherwise","location":null,"status":"passed","title":"returns # otherwise"}],"endTime":1573060132623,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/widgets/__tests__/Vision.js","startTime":1573060131635,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props","location":null,"status":"passed","title":"computes provided props"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on props change","location":null,"status":"passed","title":"computes provided props on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with the correct value for `canRender` on props change","location":null,"status":"passed","title":"computes provided props with the correct value for `canRender` on props change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props on search state change","location":null,"status":"passed","title":"computes provided props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state computes provided props with latest props on search state change","location":null,"status":"passed","title":"computes provided props with latest props on search state change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not compute provided props when props do not change","location":null,"status":"passed","title":"does not compute provided props when props do not change"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state use shouldComponentUpdate when provided","location":null,"status":"passed","title":"use shouldComponentUpdate when provided"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state subscribes to the store once mounted","location":null,"status":"passed","title":"subscribes to the store once mounted"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state unsubscribes from the store on unmount","location":null,"status":"passed","title":"unsubscribes from the store on unmount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","state"],"failureMessages":[],"fullName":"createConnector state does not throw an error on dispatch after unmount","location":null,"status":"passed","title":"does not throw an error on dispatch after unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getMetadata","location":null,"status":"passed","title":"registers itself as a widget with getMetadata"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget with getSearchParameters","location":null,"status":"passed","title":"registers itself as a widget with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget registers itself as a widget once mounted","location":null,"status":"passed","title":"registers itself as a widget once mounted"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not register itself as a widget without getMetadata nor getSearchParameters","location":null,"status":"passed","title":"does not register itself as a widget without getMetadata nor getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchParameters on mount with getSearchParameters","location":null,"status":"passed","title":"calls onSearchParameters on mount with getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not call onSearchParameters on mount without getSearchParameters","location":null,"status":"passed","title":"does not call onSearchParameters on mount without getSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget binds getSearchParameters to the connector instance with onSearchParameters","location":null,"status":"passed","title":"binds getSearchParameters to the connector instance with onSearchParameters"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers a widgetManager update on props change","location":null,"status":"passed","title":"triggers a widgetManager update on props change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger a widgetManager update when props do not change","location":null,"status":"passed","title":"does not trigger a widgetManager update when props do not change"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget triggers an onSearchStateChange on props change with transitionState","location":null,"status":"passed","title":"triggers an onSearchStateChange on props change with transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not trigger an onSearchStateChange on props change without transitionState","location":null,"status":"passed","title":"does not trigger an onSearchStateChange on props change without transitionState"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget unregisters itself on unmount","location":null,"status":"passed","title":"unregisters itself on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget calls onSearchStateChange with cleanUp without empty keys on unmount","location":null,"status":"passed","title":"calls onSearchStateChange with cleanUp without empty keys on unmount"},{"ancestorTitles":["createConnector","widget"],"failureMessages":[],"fullName":"createConnector widget does not throw an error on unmount before mount","location":null,"status":"passed","title":"does not throw an error on unmount before mount"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns the widget search parameters when getSearchParameters is provided","location":null,"status":"passed","title":"returns the widget search parameters when getSearchParameters is provided"},{"ancestorTitles":["createConnector","getSearchParameters"],"failureMessages":[],"fullName":"createConnector getSearchParameters returns null when getSearchParameters is not provided","location":null,"status":"passed","title":"returns null when getSearchParameters is not provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns the widget metadata when getMetadata is provided","location":null,"status":"passed","title":"returns the widget metadata when getMetadata is provided"},{"ancestorTitles":["createConnector","getMetadata"],"failureMessages":[],"fullName":"createConnector getMetadata returns an empty object when getMetadata is not provided","location":null,"status":"passed","title":"returns an empty object when getMetadata is not provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the widget transitionState when transitionState is provided","location":null,"status":"passed","title":"returns the widget transitionState when transitionState is provided"},{"ancestorTitles":["createConnector","transitionState"],"failureMessages":[],"fullName":"createConnector transitionState returns the given next state when transitionState is not provided","location":null,"status":"passed","title":"returns the given next state when transitionState is not provided"},{"ancestorTitles":["createConnector","refine"],"failureMessages":[],"fullName":"createConnector refine passes a refine method to the component","location":null,"status":"passed","title":"passes a refine method to the component"},{"ancestorTitles":["createConnector","createURL"],"failureMessages":[],"fullName":"createConnector createURL passes a createURL method to the component","location":null,"status":"passed","title":"passes a createURL method to the component"},{"ancestorTitles":["createConnector","wrapped with VisionProvider"],"failureMessages":[],"fullName":"createConnector wrapped with VisionProvider default export reads from context","location":null,"status":"passed","title":"default export reads from context"}],"endTime":1573060133358,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createConnector.js","startTime":1573060131824,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator applies its default props","location":null,"status":"passed","title":"applies its default props"},{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator should render with .loading class when isLoading prop is true","location":null,"status":"passed","title":"should render with .loading class when isLoading prop is true"},{"ancestorTitles":["Loading Indicator"],"failureMessages":[],"fullName":"Loading Indicator should not render with .loading class when isLoading prop is false","location":null,"status":"passed","title":"should not render with .loading class when isLoading prop is false"}],"endTime":1573060134028,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/components/__tests__/LoadingIndicator.test.js","startTime":1573060132624,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index accumulate records internally","location":null,"status":"passed","title":"accumulate records internally"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index prepend records internally","location":null,"status":"passed","title":"prepend records internally"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index accumulate records internally while changing perPage configuration","location":null,"status":"passed","title":"accumulate records internally while changing perPage configuration"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index should not reset while accumulating results","location":null,"status":"passed","title":"should not reset while accumulating results"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index Indicates the last page after several pages","location":null,"status":"passed","title":"Indicates the last page after several pages"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index calls refine with next page when calling refineNext","location":null,"status":"passed","title":"calls refine with next page when calling refineNext"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index calls refine with previous page when calling refinePrevious","location":null,"status":"passed","title":"calls refine with previous page when calling refinePrevious"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index adds 1 to page when calling refine","location":null,"status":"passed","title":"adds 1 to page when calling refine"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index set page to the corresponding index","location":null,"status":"passed","title":"set page to the corresponding index"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index automatically converts String state to Number","location":null,"status":"passed","title":"automatically converts String state to Number"},{"ancestorTitles":["connectInfiniteHits","single index"],"failureMessages":[],"fullName":"connectInfiniteHits single index expect to always return an array of records","location":null,"status":"passed","title":"expect to always return an array of records"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index provides the current records to the component","location":null,"status":"passed","title":"provides the current records to the component"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index accumulate records internally","location":null,"status":"passed","title":"accumulate records internally"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index prepend records internally","location":null,"status":"passed","title":"prepend records internally"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index accumulate records internally while changing perPage configuration","location":null,"status":"passed","title":"accumulate records internally while changing perPage configuration"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index should not accumulate records internally while changing query","location":null,"status":"passed","title":"should not accumulate records internally while changing query"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index should not reset while accumulating results","location":null,"status":"passed","title":"should not reset while accumulating results"},{"ancestorTitles":["connectInfiniteHits","multi index"],"failureMessages":[],"fullName":"connectInfiniteHits multi index Indicates the last page after several pages","location":null,"status":"passed","title":"Indicates the last page after several pages"}],"endTime":1573060134626,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectInfiniteHits.js","startTime":1573060132964,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker","location":null,"status":"passed","title":"expect to create a marker"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom anchor","location":null,"status":"passed","title":"expect to create a marker with a custom anchor"},{"ancestorTitles":["createHTMLMarker"],"failureMessages":[],"fullName":"createHTMLMarker expect to create a marker with a custom className","location":null,"status":"passed","title":"expect to create a marker with a custom className"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to append the element to the overlay","location":null,"status":"passed","title":"expect to append the element to the overlay"},{"ancestorTitles":["createHTMLMarker","onAdd"],"failureMessages":[],"fullName":"createHTMLMarker onAdd expect to not append the element to the overlay when panes are not available","location":null,"status":"passed","title":"expect to not append the element to the overlay when panes are not available"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct position on the element","location":null,"status":"passed","title":"expect to set the correct position on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to set the correct zIndex on the element","location":null,"status":"passed","title":"expect to set the correct zIndex on the element"},{"ancestorTitles":["createHTMLMarker","draw"],"failureMessages":[],"fullName":"createHTMLMarker draw expect to not set the correct position when the projection is not available","location":null,"status":"passed","title":"expect to not set the correct position when the projection is not available"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove the element","location":null,"status":"passed","title":"expect to remove the element"},{"ancestorTitles":["createHTMLMarker","onRemove"],"failureMessages":[],"fullName":"createHTMLMarker onRemove expect to remove all the listeners","location":null,"status":"passed","title":"expect to remove all the listeners"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to register listener","location":null,"status":"passed","title":"expect to register listener"},{"ancestorTitles":["createHTMLMarker","addListener"],"failureMessages":[],"fullName":"createHTMLMarker addListener expect to return a function to remove the listener","location":null,"status":"passed","title":"expect to return a function to remove the listener"},{"ancestorTitles":["createHTMLMarker","getPosition"],"failureMessages":[],"fullName":"createHTMLMarker getPosition expect to return the latLng","location":null,"status":"passed","title":"expect to return the latLng"}],"endTime":1573060134763,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/elements/__tests__/createHTMLMarker.js","startTime":1573060133408,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createVisionManager"],"failureMessages":[],"fullName":"createVisionManager initializes the manager with an empty state","location":null,"status":"passed","title":"initializes the manager with an empty state"}],"endTime":1573060135142,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createVisionManager.js","startTime":1573060134045,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames","location":null,"status":"passed","title":"expect to return classNames"},{"ancestorTitles":["utils","createClassNames"],"failureMessages":[],"fullName":"utils createClassNames expect to return classNames with custom prefix","location":null,"status":"passed","title":"expect to return classNames with custom prefix"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if a modifier key is pressed","location":null,"status":"passed","title":"returns true if a modifier key is pressed"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns true if it's a middle click","location":null,"status":"passed","title":"returns true if it's a middle click"},{"ancestorTitles":["utils","isSpecialClick"],"failureMessages":[],"fullName":"utils isSpecialClick returns false otherwise","location":null,"status":"passed","title":"returns false otherwise"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize capitalizes a string","location":null,"status":"passed","title":"capitalizes a string"},{"ancestorTitles":["utils","capitalize"],"failureMessages":[],"fullName":"utils capitalize works with empty strings","location":null,"status":"passed","title":"works with empty strings"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end","location":null,"status":"passed","title":"with end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with start and end","location":null,"status":"passed","title":"with start and end"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range with end and step","location":null,"status":"passed","title":"with end and step"},{"ancestorTitles":["utils","range"],"failureMessages":[],"fullName":"utils range rounds decimal array lengths","location":null,"status":"passed","title":"rounds decimal array lengths"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1573060135858,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom/src/core/__tests__/utils.js","startTime":1573060134690,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there is a single index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there is a single index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with no namespace","location":null,"status":"passed","title":"refine with no namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine with namespace","location":null,"status":"passed","title":"refine with namespace"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves the current refinement value","location":null,"status":"passed","title":"retrieves the current refinement value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves default value","location":null,"status":"passed","title":"retrieves default value"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index","getCurrentRefinementValue"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index getCurrentRefinementValue retrieves from objects without prototype","location":null,"status":"passed","title":"retrieves from objects without prototype"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index clean up values","location":null,"status":"passed","title":"clean up values"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index get results","location":null,"status":"passed","title":"get results"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should reset indices page to 1 with resetPage","location":null,"status":"passed","title":"refine shared widgets should reset indices page to 1 with resetPage"},{"ancestorTitles":["utility method for manipulating the search state","when there are multiple index"],"failureMessages":[],"fullName":"utility method for manipulating the search state when there are multiple index refine shared widgets should not reset indices page to 1 without resetPage","location":null,"status":"passed","title":"refine shared widgets should not reset indices page to 1 without resetPage"}],"endTime":1573060136082,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/indexUtils.js","startTime":1573060134798,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from classes","location":null,"status":"passed","title":"gets the right displayName from classes"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName gets the right displayName from stateless components","location":null,"status":"passed","title":"gets the right displayName from stateless components"},{"ancestorTitles":["utils","getDisplayName"],"failureMessages":[],"fullName":"utils getDisplayName sets a default displayName when not able to find one","location":null,"status":"passed","title":"sets a default displayName when not able to find one"},{"ancestorTitles":["utils","defer"],"failureMessages":[],"fullName":"utils defer calling a function asynchronously, should be done as soon as possible.","location":null,"status":"passed","title":"calling a function asynchronously, should be done as soon as possible."},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key empty key should be removed","location":null,"status":"passed","title":"empty key should be removed"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not do anything on empty root","location":null,"status":"passed","title":"does not do anything on empty root"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does empty out objects","location":null,"status":"passed","title":"does empty out objects"},{"ancestorTitles":["utils","remove empty key"],"failureMessages":[],"fullName":"utils remove empty key does not empty out arrays","location":null,"status":"passed","title":"does not empty out arrays"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 1 and 2 on page 0","location":null,"status":"passed","title":"should add __positions 1 and 2 on page 0"},{"ancestorTitles":["utils","addAbsolutePositions"],"failureMessages":[],"fullName":"utils addAbsolutePositions should add __positions 5 and 6 on page 2","location":null,"status":"passed","title":"should add __positions 5 and 6 on page 2"},{"ancestorTitles":["utils","addQueryID"],"failureMessages":[],"fullName":"utils addQueryID should passed __queryID to records","location":null,"status":"passed","title":"should passed __queryID to records"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined on non-object root","location":null,"status":"passed","title":"returns undefined on non-object root"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns path if exists","location":null,"status":"passed","title":"returns path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath accepts a pre-split path as array","location":null,"status":"passed","title":"accepts a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath does not split a pre-split path as array","location":null,"status":"passed","title":"does not split a pre-split path as array"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if does not exist","location":null,"status":"passed","title":"returns undefined if does not exist"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns indexed path if exists","location":null,"status":"passed","title":"returns indexed path if exists"},{"ancestorTitles":["utils","getPropertyByPath"],"failureMessages":[],"fullName":"utils getPropertyByPath returns undefined if indexed path does not exist","location":null,"status":"passed","title":"returns undefined if indexed path does not exist"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns the first match based on the comparator","location":null,"status":"passed","title":"returns the first match based on the comparator"},{"ancestorTitles":["utils","find"],"failureMessages":[],"fullName":"utils find returns undefined in non-found cases","location":null,"status":"passed","title":"returns undefined in non-found cases"}],"endTime":1573060136331,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/utils.js","startTime":1573060135295,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners from events","location":null,"status":"passed","title":"expect to add listeners from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to add listeners with event & marker","location":null,"status":"passed","title":"expect to add listeners with event & marker"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from events","location":null,"status":"passed","title":"expect to only add listeners listed from events"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to only add listeners listed from props","location":null,"status":"passed","title":"expect to only add listeners listed from props"},{"ancestorTitles":["utils","registerEvents"],"failureMessages":[],"fullName":"utils registerEvents expect to return a function that remove the listeners","location":null,"status":"passed","title":"expect to return a function that remove the listeners"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an object with listeners propType from event types","location":null,"status":"passed","title":"expect to return an object with listeners propType from event types"},{"ancestorTitles":["utils","createListenersPropTypes"],"failureMessages":[],"fullName":"utils createListenersPropTypes expect to return an empty object from empty event types","location":null,"status":"passed","title":"expect to return an empty object from empty event types"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an object without excluded keys","location":null,"status":"passed","title":"expect to return an object without excluded keys"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return the given props when excluded keys is empty","location":null,"status":"passed","title":"expect to return the given props when excluded keys is empty"},{"ancestorTitles":["utils","createFilterProps"],"failureMessages":[],"fullName":"utils createFilterProps expect to return an empty object when all keys are excluded","location":null,"status":"passed","title":"expect to return an empty object when all keys are excluded"}],"endTime":1573060136428,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/utils.js","startTime":1573060135931,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["GoogleMapsLoader"],"failureMessages":[],"fullName":"GoogleMapsLoader expect to require the file in a Node environment","location":null,"status":"passed","title":"expect to require the file in a Node environment"}],"endTime":1573060136560,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-dom-maps/src/__tests__/GoogleMapsLoader.node.js","startTime":1573060136160,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createStore","getState"],"failureMessages":[],"fullName":"createStore getState retrieves the current state of the store","location":null,"status":"passed","title":"retrieves the current state of the store"},{"ancestorTitles":["createStore","setState"],"failureMessages":[],"fullName":"createStore setState sets a new state","location":null,"status":"passed","title":"sets a new state"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe subscribes to new states","location":null,"status":"passed","title":"subscribes to new states"},{"ancestorTitles":["createStore","subscribe"],"failureMessages":[],"fullName":"createStore subscribe returns a method to unsubscribe","location":null,"status":"passed","title":"returns a method to unsubscribe"}],"endTime":1573060136757,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createStore.js","startTime":1573060136358,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() it does not break when there is a missing attribute","location":null,"status":"passed","title":"it does not break when there is a missing attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is no tag","location":null,"status":"passed","title":"creates a single element when there is no tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() creates a single element when there is only a tag","location":null,"status":"passed","title":"creates a single element when there is only a tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() fetches and parses a deep attribute","location":null,"status":"passed","title":"fetches and parses a deep attribute"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - 1 big highlight","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - 1 big highlight"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() supports the array format, parses it and returns the part that is highlighted","location":null,"status":"passed","title":"supports the array format, parses it and returns the part that is highlighted"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() parses the string and returns the part that are highlighted - same pre and post tag","location":null,"status":"passed","title":"parses the string and returns the part that are highlighted - same pre and post tag"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `null`","location":null,"status":"passed","title":"throws when hit is `null`"},{"ancestorTitles":["parseAlgoliaHit()"],"failureMessages":[],"fullName":"parseAlgoliaHit() throws when hit is `undefined`","location":null,"status":"passed","title":"throws when hit is `undefined`"}],"endTime":1573060136923,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/highlight.js","startTime":1573060136490,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index refines the perPage parameter","location":null,"status":"passed","title":"refines the perPage parameter"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index registers its id in metadata","location":null,"status":"passed","title":"registers its id in metadata"},{"ancestorTitles":["connectHitsPerPage","single index"],"failureMessages":[],"fullName":"connectHitsPerPage single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1573060137075,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectHitsPerPage.js","startTime":1573060136576,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget adds the widget to the widgets list","location":null,"status":"passed","title":"adds the widget to the widgets list"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget returns an unregister method","location":null,"status":"passed","title":"returns an unregister method"},{"ancestorTitles":["createWidgetsManager","registerWidget"],"failureMessages":[],"fullName":"createWidgetsManager registerWidget schedules an update","location":null,"status":"passed","title":"schedules an update"},{"ancestorTitles":["createWidgetsManager","update"],"failureMessages":[],"fullName":"createWidgetsManager update schedules an update","location":null,"status":"passed","title":"schedules an update"}],"endTime":1573060137203,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/core/__tests__/createWidgetsManager.js","startTime":1573060136815,"status":"passed","summary":""},{"assertionResults":[{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index provides the correct props to the component","location":null,"status":"passed","title":"provides the correct props to the component"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index calling refine updates the widget's search state","location":null,"status":"passed","title":"calling refine updates the widget's search state"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index supports defaultRefinement","location":null,"status":"passed","title":"supports defaultRefinement"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index refines the query parameter","location":null,"status":"passed","title":"refines the query parameter"},{"ancestorTitles":["connectSearchBox","single index"],"failureMessages":[],"fullName":"connectSearchBox single index should return the right searchState when clean up","location":null,"status":"passed","title":"should return the right searchState when clean up"}],"endTime":1573060137228,"message":"","name":"/Users/etienne/Projects/clinia/react-vision/packages/react-vision-core/src/connectors/__tests__/connectSearchBox.js","startTime":1573060136935,"status":"passed","summary":""}],"wasInterrupted":false}